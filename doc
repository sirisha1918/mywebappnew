Activities 

1. Setting Up Docker 

In the VM lab, in the applications find terminal and open it. 

Install Maven using the below commands  

sudo apt update  

sudo apt install maven 

Run the following commands to assign Jenkins to the Docker group and restart Jenkins: 

sudo usermod -aG docker jenkins 

sudo systemctl restart jenkins 

2. Building the Docker Image 

Navigate to the project folder on Desktop. Open the Dockerfille using Visual Studio Code. In the application drop-down, find the development option and click on it. You can find Visual Studio code and open it.  

Update the Dockerfile with below code:  
 
# Step 1: Build the Spring Boot application 
 # Use an official Maven image to build the application 
 FROM maven:3.9.9-eclipse-temurin-17 AS build 

# Set the working directory 
 WORKDIR /app 

# Copy the pom.xml and source code into the container 
 COPY pom.xml . 
 COPY src ./src 

# Run Maven to build the application (creates the .jar file) 
 RUN mvn clean package  

# Step 2: Prepare the runtime environment 
 # Use a slim OpenJDK image to run the application 
 FROM openjdk:17-jdk-slim 

# Set the working directory for the runtime container 
 WORKDIR /app 

# Copy the compiled jar file from the build stage 
 COPY --from=build /app/target/advanced-web-app-1.0-SNAPSHOT.jar app.jar 

# Expose the port the application will run on 
 EXPOSE 8081 

# Command to run the application 
 ENTRYPOINT ["java", "-jar", "app.jar"] 
 

 Build the Docker image using the terminal. 

Navigate to the project directory and run the following command to build the Docker image with the name “my-web-app" with a tag 1.0: 

Cd Desktop/Project 

docker build -t my-web-app:1.0 . 

Once the image is built, run the image on a container on port 8082 with the container name "webapp_container" : 

docker run -p 8082:8081 my-web-app:1.0 

Keep the docker container in the running state. 

Verify if the output is visible on http://localhost:8082.  

Login to docker hub using the link . If you don't have a docker hub account, create a new account. 

Create a repository by using this link with the name “my-web-app" and make the repo public. 

Once the repository is created. Navigate to the Jenkinsfile in the project folder in VS code and update the environment variables: (change the {docker-hub-username} with your docker hub username and save the file) 

environment {  

DOCKER_IMAGE = "{docker-hub-username}/my-web-app"	 

DOCKER_TAG = "latest"  

} 

3. Configuring Jenkins for Docker Integration 

Open the Jenkins server at http://localhost:8080 and log in using the credentials provided in the readme file in the desktop. (username: jenkinsuser  password : Jenkinsuser@123) 

4. Setting Up GitHub Repository and Docker Hub 

Open your github using this link and create a repository with name “my-web-app”. Make it a public repository. 

Once the repository is created, navigate to the terminal and to the project path. Fill the GitHub username and the GitHub email id. 

cd Desktop/Project 

git config user.name "New GitHub Username" 

         git config user.email "your-email@example.com" 

Initialize the repository 

git init 

Add all files to the repository 

git add . 

Commit the changes 

git commit -m "Initial commit" 

Add the GitHub remote repository 

git remote add origin https://github.com/username/my-web-app.git 

Push to GitHub 

git push -u origin master 

Log in with your GitHub email ID and password as the PAT token if the authenticator is enabled for your GitHub account. By this the repository is uploaded into git 

Open the Jenkinsfile in VS code and update the Jenkinsfile with the latest repository git url in the Checkout Stage. 

5. Configuring Jenkins Pipeline 

Create a new Jenkins pipeline named webapplication-pipeline. 

In the Pipeline section, change the pipeline definition to "Pipeline script from SCM". 

Go to Manage Jenkins > Credentials > Global > Add Credentials. 

Add your Docker Hub credentials and save it with ID docker-hub-credentials. 

Go to the webapplication-pipeline project in Jenkins and click on Build Now. 

After a successful build, the Maven app will be visible on port 8081 in chrome of VM lab. 










025-01-24T10:00:01.878Z  WARN 5306 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Unsatisfied dependency expressed through method 'dataSourceScriptDatabaseInitializer' parameter 0: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception with message: Failed to determine a suitable driver class
2025-01-24T10:00:01.881Z  INFO 5306 --- [           main] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2025-01-24T10:00:01.916Z  INFO 5306 --- [           main] .s.b.a.l.ConditionEvaluationReportLogger : 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-24T10:00:01.932Z ERROR 5306 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.

Reason: Failed to determine a suitable driver class
